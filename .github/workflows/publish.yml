name: Build Go Cross Platform

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  artifact_name: biligo-live-ws
  version: 0.1.2
  GOPRIVATE: github.com/eric2788

on:
  push:
    branches: [ master ]
    
jobs:

  build_linux:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
      
    - name: Build Linux
      run: go build -o ./dist/biligo-ws-live
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: ${{ env.artifact_name }}
        path: 'dist'
  build_windows:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.17
      
    - name: Build Linux
      run: go build --buildmode=exe -o ./dist/biligo-ws-live.exe
    
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v2.2.4
      with:
        name: ${{ env.artifact_name }}
        path: 'dist'
        
  upload_release:
    runs-on: ubuntu-latest
    needs: [build_windows, build_linux]
    steps:
    - uses: actions/download-artifact@v2
      id: download
      with:
        name: ${{ env.artifact_name }}

    - name: Delete tag and release
      id: delete-tag-release
      uses: dev-drprasad/delete-tag-and-release@v0.1.2
      with:
        tag_name: ${{ env.version }}
        delete_release: true

    - name: zip the directory
      run: |
        [ -d ${{steps.download.outputs.download-path}} ] && ls -la ${{ steps.download.outputs.download-path }}
        cd ${{steps.download.outputs.download-path}}
        zip -r ${{ env.artifact_name }}.zip .
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ env.version }}
        release_name: Release ${{ github.repository }}-${{ env.version }}
        body: |
          .zip 內有 window 和 linux 的點擊運行程序
          如欲無需 go 環境，可以下載 zip 直接打開程序運行
        draft: false
        prerelease: false

    - name: Upload Release
      id: upload-release-zip
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path: ./${{ env.artifact_name }}.zip
        asset_name: ${{ env.artifact_name }}.zip
        asset_content_type: application/zip
        
